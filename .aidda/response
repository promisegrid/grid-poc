<think>
Okay, I need to create the README.md file for the sim1 simulation based on the user's instructions. Let me start by understanding what the simulation does.

The user described two agents, agent1 and agent2, which communicate using the PromiseGrid protocol. Each runs as a separate Go program, using the kernel and wire packages. The wire package handles message serialization with CBOR and CIDs, while the kernel manages network connections and message routing.

The README should explain the simulation overview, how it works, and how to run it. Let's break it down.

First, the overview: I'll mention that it's a demonstration of two agents communicating over TCP using persistent connections. The agents use the kernel for networking and the wire package for messages.

Next, the components. The wire package defines the Message struct and CBOR serialization. The kernel handles connections, subscriptions, and message routing. The agents use these to send and receive messages.

For the workflow, agent1 sends "hello world" to agent2, which responds with "hello back". The kernel ensures the TCP connection stays open. Each agent subscribes to a specific protocol CID to listen for messages.

Setting up the environment requires Go 1.21 or later. I'll list the commands to run the agents in separate terminals, specifying their ports and peer addresses. Then, the expected output should show the messages being received by each agent.

I should also include notes about the protocol CIDs being hardcoded for simplicity and the kernel's role in maintaining the connection. Make sure to mention that pressing enter stops the agents.

Let me structure the README with sections: Overview, Components, How It Works, Running the Simulation, and Notes. Use code blocks for commands and outputs. Keep lines wrapped at 70 characters as instructed.

Check if all necessary details are covered: separate processes, command-line flags, kernel functions, message flow, and setup steps. Ensure the instructions are clear for someone to follow without prior knowledge.

Finally, verify that the CIDs in the agent code match the description and that the ports used (7271 and 7272) are correctly noted in the run commands. Also, confirm that the response protocol CID is different from the main one to show bidirectional communication.
</think>

File: /home/stevegt/lab/grid-poc/x/sim1/README.md
```markdown
# PromiseGrid Simulation (sim1)

A demonstration of two agents communicating via persistent TCP
connections using the PromiseGrid protocol pattern.

## Overview

This simulation shows two Go processes (agent1 and agent2) exchanging
CBOR-encoded messages through a kernel layer that manages network
connections and message routing. Key features:

- Persistent TCP connections with automatic reconnection
- CID-based protocol subscriptions
- Asynchronous message handling
- Bi-directional communication

## Components

### wire Package
- Defines `Message` struct with Protocol CID and Payload
- CBOR serialization/deserialization with deterministic encoding
- Custom CBOR tag (0x67726964) for message structure

### kernel Package
- Manages network connections
- Handles message routing to protocol handlers
- Provides publish/subscribe interface to agents
- Automatic connection maintenance

### Agents
- agent1: Initiates conversation, listens on port 7271
- agent2: Responds to messages, listens on port 7272

## How It Works

1. Agents start with specified peer addresses and ports
2. Kernel maintains persistent TCP connection between peers
3. Message flow:
   - agent1 sends "hello world" every second
   - agent2 receives message and sends "hello back" response
   - Both agents print received messages to stdout

## Running the Simulation

### Prerequisites
- Go 1.21 or later
- Terminal split into two windows

### Setup
1. Build both agents:
```bash
go build -o agent1 ./agent1
go build -o agent2 ./agent2
```

2. In terminal 1 (agent1):
```bash
./agent1 -port 7271 -peer localhost:7272
```

3. In terminal 2 (agent2):
```bash
./agent2 -port 7272 -peer localhost:7271
```

### Expected Output

**agent1:**
```
Agent1 running. Press enter to exit...
Agent1 received: hello back
```

**agent2:**
```
Agent2 running. Press enter to exit...
Agent2 received: hello world
```

## Notes

- Protocol CIDs are hardcoded for demonstration:
  - Main protocol: `bafkreibm6jg3ux5qumhcn2b3flc3tyu6dmlb4xa7u5bf44ydelk6a2mhny`
  - Response protocol: `bafkreieq5jui4j25l3wpyw54my6fzdtcssgxhtd7wvb5klqnbawtgta5iu`
- The kernel automatically reconnects if the TCP connection drops
- Press Enter in either terminal to gracefully shut down the agent
```

<references>
</references>
