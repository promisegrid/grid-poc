File: /home/stevegt/lab/grid-poc/x/gopherjs/hello-wasm/hello.go
```go
package main

import (
	"syscall/js"
)

func main() {
	// Create a channel to prevent the function from exiting.
	done := make(chan struct{}, 0)

	// Get the global document object.
	document := js.Global().Get("document")

	// Create a button element.
	button := document.Call("createElement", "button")
	button.Set("innerHTML", "Click me")
	document.Get("body").Call("appendChild", button)

	// Define the callback function for the "click" event.
	clickCallback := js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		// Create a paragraph element.
		p := document.Call("createElement", "p")
		p.Set("innerHTML", "Hello, big world!")
		document.Get("body").Call("appendChild", p)
		return nil
	})
	// Ensure the callback is released when not needed.
	defer clickCallback.Release()

	// Add the click event listener to the button.
	button.Call("addEventListener", "click", clickCallback)

	// Block forever so that the WASM module stays alive.
	<-done
}
```
EOF_/home/stevegt/lab/grid-poc/x/gopherjs/hello-wasm/hello.go

File: /home/stevegt/lab/grid-poc/x/gopherjs/hello-wasm/hello.html
```html
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Go WASM Demo</title>
</head>
<body>
  <h1>Go WASM Demo</h1>
  <!-- The button and paragraphs will be appended by the WebAssembly module -->
  <script src="wasm_exec.js"></script>
  <script>
    const go = new Go();
    if (WebAssembly.instantiateStreaming) {
      WebAssembly.instantiateStreaming(fetch("hello.wasm"), go.importObject).then((result) => {
        go.run(result.instance);
      });
    } else {
      fetch("hello.wasm").then(response =>
        response.arrayBuffer()
      ).then(bytes =>
        WebAssembly.instantiate(bytes, go.importObject)
      ).then((result) => {
        go.run(result.instance);
      });
    }
  </script>
</body>
</html>
```
EOF_/home/stevegt/lab/grid-poc/x/gopherjs/hello-wasm/hello.html

File: /home/stevegt/lab/grid-poc/x/gopherjs/hello-wasm/Makefile
```
# Makefile for building the WebAssembly demo

GOOS=js
GOARCH=wasm
GOCMD=go
OUTPUT=hello.wasm

all: build

build:
	$(GOCMD) build -o $(OUTPUT) hello.go

clean:
	rm -f $(OUTPUT)

.PHONY: all build clean
```
EOF_/home/stevegt/lab/grid-poc/x/gopherjs/hello-wasm/Makefile