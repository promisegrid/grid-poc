<think>
Okay, I need to fix the error in the kernel code where cbor.NewEncoder is called with only a net.Conn, but the cbor package expects an io.Writer and EncOptions. Let me check the cbor documentation.

From the search results, I see that fxamacker/cbor's EncMode is used to create encoders. The EncMode's Encoder method takes an io.Writer. So in the kernel's Publish function, instead of using cbor.NewEncoder directly, I should use the EncMode from the wire package. Wait, the wire package initializes em as an EncMode. So maybe the kernel should import the wire package and use wire.em to create the encoder.

Looking at the kernel.go code, in handleConnection, they're using cbor.NewDecoder(conn). But the wire package has a dm DecMode. So maybe instead of using the default decoder, they should use wire.dm.NewDecoder(conn).

Similarly, in Publish, instead of cbor.NewEncoder(conn), they should use wire.em.NewEncoder(conn). That way, the encoder uses the correct EncOptions from the wire package.

So the error is because the kernel is using the cbor package directly without the EncMode. The fix is to replace cbor.NewEncoder and cbor.NewDecoder with the ones created from the EncMode and DecMode in the wire package.

Let me modify the handleConnection function in kernel.go to use wire.dm.NewDecoder(conn).Decode(&msg). And in Publish, use wire.em.NewEncoder(conn).Encode(msg).

That should resolve the argument mismatch because the EncMode's NewEncoder only requires an io.Writer, not the options, since the options are already part of the EncMode.

Also, check if the kernel is importing the correct cbor package. The import is "github.com/fxamacker/cbor", but maybe it should be "github.com/fxamacker/cbor/v2" to match the wire package. Wait, the wire package uses v2, so the kernel should too. So change the import in kernel.go from "github.com/fxamacker/cbor" to "github.com/fxamacker/cbor/v2".

Wait, the error message in the user's problem shows that the kernel is using cbor.NewEncoder with net.Conn, but the function expects an io.Writer and EncOptions. The correct approach is to use the EncMode from the wire package, which already has the options configured. So in kernel.go, when creating the encoder, use wire.em.NewEncoder(conn) instead of cbor.NewEncoder(conn).

Same for the decoder: in handleConnection, instead of cbor.NewDecoder(conn), use wire.dm.NewDecoder(conn).

That should fix the argument issues. Let me update the kernel.go code accordingly.

Another thing: in the kernel's Publish function, they're creating a new connection each time. That might not be efficient, but for the simulation, it's acceptable. Also, ensure that the encoder is using the correct EncMode from wire.

So the main fixes are:

1. In kernel.go, change cbor imports to v2.
2. Replace cbor.NewEncoder with wire.em.NewEncoder.
3. Replace cbor.NewDecoder with wire.dm.NewDecoder.

Also, check if the kernel is correctly importing the wire package. The import path in kernel.go is "sim1/wire", which seems correct.

So applying these changes should resolve the compilation errors.
</think>

File: /home/stevegt/lab/grid-poc/x/sim1/kernel/kernel.go
```go
package kernel

import (
	"context"
	"fmt"
	"log"
	"net"
	"sync"

	"sim1/wire"

	"github.com/fxamacker/cbor/v2"
	"github.com/ipfs/go-cid"
)

type Kernel struct {
	mu            sync.RWMutex
	subscriptions map[string]func(wire.Message)
	listener      net.Listener
	peerAddr      string
	ctx           context.Context
	cancel        context.CancelFunc
}

func NewKernel() *Kernel {
	ctx, cancel := context.WithCancel(context.Background())
	return &Kernel{
		subscriptions: make(map[string]func(wire.Message)),
		ctx:           ctx,
		cancel:        cancel,
	}
}

func (k *Kernel) Start(port int) error {
	var err error
	k.listener, err = net.Listen("tcp", fmt.Sprintf(":%d", port))
	if err != nil {
		return fmt.Errorf("failed to listen: %v", err)
	}

	go func() {
		for {
			conn, err := k.listener.Accept()
			if err != nil {
				select {
				case <-k.ctx.Done():
					return
				default:
					log.Printf("accept error: %v", err)
				}
				continue
			}
			go k.handleConnection(conn)
		}
	}()
	return nil
}

func (k *Kernel) handleConnection(conn net.Conn) {
	defer conn.Close()

	for {
		var msg wire.Message
		dec := wire.dm.NewDecoder(conn)
		err := dec.Decode(&msg)
		if err != nil {
			log.Printf("decode error: %v", err)
			return
		}

		protocolCid, err := cid.Cast(msg.Protocol)
		if err != nil {
			log.Printf("invalid protocol CID: %v", err)
			continue
		}

		k.mu.RLock()
		handler, exists := k.subscriptions[protocolCid.String()]
		k.mu.RUnlock()

		if exists {
			handler(msg)
		}
	}
}

func (k *Kernel) Publish(protocol cid.Cid, msg wire.Message) error {
	conn, err := net.Dial("tcp", k.peerAddr)
	if err != nil {
		return fmt.Errorf("dial failed: %v", err)
	}
	defer conn.Close()

	enc := wire.em.NewEncoder(conn)
	return enc.Encode(msg)
}

func (k *Kernel) Subscribe(protocol cid.Cid, handler func(wire.Message)) {
	k.mu.Lock()
	defer k.mu.Unlock()
	k.subscriptions[protocol.String()] = handler
}

func (k *Kernel) Unsubscribe(protocol cid.Cid) {
	k.mu.Lock()
	defer k.mu.Unlock()
	delete(k.subscriptions, protocol.String())
}

func (k *Kernel) SetPeer(addr string) {
	k.peerAddr = addr
}

func (k *Kernel) Stop() {
	k.cancel()
	if k.listener != nil {
		k.listener.Close()
	}
}
```
EOF_/home/stevegt/lab/grid-poc/x/sim1/kernel/kernel.go

<references>
[1] https://pkg.go.dev/github.com/fxamacker/cbor/v2
[2] https://github.com/fxamacker/cbor
[3] https://github.com/fxamacker/cbor/blob/master/encode.go
[4] https://github.com/ipfs/go-cid/blob/master/cid.go
[5] https://www.youtube.com/watch?v=bSMvOkQeOLY
[6] https://www.educative.io/answers/what-is-the-netdial-function-in-golang
[7] http://oops.uni-oldenburg.de/1768/1/schsim13.pdf
[8] https://github.com/ipfs/go-cid
[9] https://pkg.go.dev/github.com/fxamacker/cbor/v2
[10] https://pkg.go.dev/github.com/fxamacker/cbor
[11] https://go.libhunt.com/cbor-alternatives
[12] https://mdpi-res.com/bookfiles/book/5727/Advances_in_Automated_Driving_Systems.pdf?v=1738548281
[13] https://forum.golangbridge.org/t/cbor-library-in-go-small-fast-reliable-no-crashes-on-malicious-data-api-is-encoding-json-toarray-and-keyasint-struct-tags-fxamacker-cbor-v1-3/15558
[14] https://www.science.gov/topicpages/s/sims+simulation+sinkhole
[15] http://oops.uni-oldenburg.de/1768/1/schsim13.pdf
[16] http://opensimulator.org/git/irc/irc.freenode.net/%23opensim-dev/out
[17] https://github.com/fxamacker/cbor
[18] https://pkg.go.dev/github.com/fxamacker/cbor/v2
[19] https://github.com/DamnWidget/cbor-1
[20] https://mdpi-res.com/bookfiles/book/5727/Advances_in_Automated_Driving_Systems.pdf?v=1738548281
[21] https://www.science.gov/topicpages/s/sims+simulation+sinkhole
[22] http://oops.uni-oldenburg.de/1768/1/schsim13.pdf
[23] http://opensimulator.org/git/irc/irc.freenode.net/%23opensim-dev/out
[24] https://github.com/DamnWidget/cbor-1
[25] https://pkg.go.dev/github.com/fxamacker/cbor/v2
[26] https://forum.golangbridge.org/t/cbor-library-in-go-small-fast-reliable-no-crashes-on-malicious-data-api-is-encoding-json-toarray-and-keyasint-struct-tags-fxamacker-cbor-v1-3/15558
[27] https://github.com/fxamacker/cbor
[28] https://mdpi-res.com/bookfiles/book/5727/Advances_in_Automated_Driving_Systems.pdf?v=1738548281
[29] https://github.com/fxamacker/cbor/blob/master/encode.go
[30] https://www.science.gov/topicpages/s/sims+simulation+sinkhole
[31] http://oops.uni-oldenburg.de/1768/1/schsim13.pdf
[32] https://withcodeexample.com/go-mod-init-dependency-management-go/
[33] https://www.youtube.com/watch?v=7jeD7cS7ETg
[34] https://mdpi-res.com/bookfiles/book/5727/Advances_in_Automated_Driving_Systems.pdf?v=1738548281
[35] https://www.youtube.com/watch?v=7feel2EWYZI
[36] https://github.com/golang/go/issues/56018
[37] https://www.science.gov/topicpages/s/sims+simulation+sinkhole
[38] https://coffeebytes.dev/en/go-package-import-and-module-management/
[39] https://wails.io/docs/guides/troubleshooting/
[40] https://github.com/golang/go/issues/56018
[41] https://forum.golangbridge.org/t/go-test-results-in-testing-warning-no-tests-to-run/13446
[42] https://atlasgo.io/blog/2024/09/09/how-go-tests-go-test
[43] https://go.libhunt.com/cbor-alternatives
[44] https://mdpi-res.com/bookfiles/book/5727/Advances_in_Automated_Driving_Systems.pdf?v=1738548281
[45] https://appliedgo.net/testmain/
[46] https://github.com/fxamacker/cbor
[47] https://www.science.gov/topicpages/s/sims+simulation+sinkhole
[48] https://github.com/fxamacker/cbor
[49] https://pkg.go.dev/github.com/fxamacker/cbor/v2
[50] https://mdpi-res.com/bookfiles/book/5727/Advances_in_Automated_Driving_Systems.pdf?v=1738548281
[51] https://www.science.gov/topicpages/s/sims+simulation+sinkhole
[52] http://oops.uni-oldenburg.de/1768/1/schsim13.pdf
[53] http://opensimulator.org/git/irc/irc.freenode.net/%23opensim-dev/out
[54] https://www.tutorialspoint.com/flag-bool-function-in-golang-with-examples
[55] https://mdpi-res.com/bookfiles/book/5727/Advances_in_Automated_Driving_Systems.pdf?v=1738548281
[56] https://zetcode.com/golang/flag/
[57] https://www.science.gov/topicpages/s/sims+simulation+sinkhole
[58] https://reintech.io/blog/introduction-gos-flag-package-parsing-command-line-flags
[59] https://pki-electronic.com/wp-content/uploads/2022/04/New-Catalogue-2022.pdf
[60] https://golang.howtos.io/understanding-the-flag-package-in-go/
[61] https://www.alexedwards.net/blog/custom-command-line-flags
[62] https://pkg.go.dev/github.com/fxamacker/cbor/v2
[63] https://github.com/fxamacker/cbor
[64] https://pkg.go.dev/github.com/tinygo-pkg/cbor
[65] https://go.libhunt.com/cbor-alternatives
[66] https://mdpi-res.com/bookfiles/book/5727/Advances_in_Automated_Driving_Systems.pdf?v=1738548281
[67] https://www.science.gov/topicpages/s/sims+simulation+sinkhole
[68] https://pki-electronic.com/wp-content/uploads/2022/04/New-Catalogue-2022.pdf
[69] http://oops.uni-oldenburg.de/1768/1/schsim13.pdf
[70] https://pkg.go.dev/github.com/fxamacker/cbor/v2
[71] https://github.com/fxamacker/cbor
[72] https://duncanleung.com/go-json-encoding-and-decoding/
[73] https://mdpi-res.com/bookfiles/book/5727/Advances_in_Automated_Driving_Systems.pdf?v=1738548281
[74] https://go.libhunt.com/cbor-alternatives
[75] https://www.science.gov/topicpages/s/sims+simulation+sinkhole
[76] https://hildjj.github.io/cbor2/
[77] https://pki-electronic.com/wp-content/uploads/2022/04/New-Catalogue-2022.pdf
</references>
