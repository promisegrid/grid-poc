File: /home/stevegt/lab/grid-poc/x/ipfs-rpc/main.go
```go
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/url"

	"github.com/ipfs/boxo/path"
	"github.com/ipfs/go-cid"
	"github.com/ipfs/kubo/client/rpc"
)

// DagPutOptions represents the options for the DAG put operation.
// Note: The original rpc.DagPutOpts type has been removed in the updated API,
// so we define our own options type here.
type DagPutOptions struct {
	Format string
	Hash   string
}

// dagPut is a helper function that calls the IPFS RPC endpoint "dag/put".
// It marshals the given object using JSON and passes the options as query parameters.
// This uses the updated API (2024/2025) since earlier DagPut methods have been deprecated.
func dagPut(ctx context.Context, ipfs *rpc.HttpApi, obj interface{}, opts DagPutOptions) (cid.Cid, error) {
	b, err := json.Marshal(obj)
	if err != nil {
		return cid.Undef, fmt.Errorf("failed to marshal object: %w", err)
	}

	qs := url.Values{}
	qs.Set("format", opts.Format)
	qs.Set("hash", opts.Hash)
	qs.Set("inputenc", "json")

	// Build the request to the "dag/put" endpoint.
	req := ipfs.Request("dag/put?" + qs.Encode())
	req.Body(bytes.NewReader(b))

	// The response structure; the API returns a JSON object containing the "Cid".
	var out struct {
		Cid string
	}
	if err := req.Exec(ctx, &out); err != nil {
		return cid.Undef, fmt.Errorf("dag/put request failed: %w", err)
	}

	c, err := cid.Decode(out.Cid)
	if err != nil {
		return cid.Undef, fmt.Errorf("failed to decode cid: %w", err)
	}
	return c, nil
}

// createThreeNodeDAG creates a three-node DAG consisting of two leaf nodes and
// one internal node. The internal node links the two leaf nodes.
func createThreeNodeDAG(ctx context.Context, ipfs *rpc.HttpApi) (cid.Cid, error) {
	// Create the first leaf node.
	leaf1Data := map[string]interface{}{
		"data": "leaf node 1",
	}
	leaf1Cid, err := dagPut(ctx, ipfs, leaf1Data, DagPutOptions{
		Format: "dag-cbor",
		Hash:   "sha2-256",
	})
	if err != nil {
		return cid.Undef, fmt.Errorf("failed to dag put leaf 1: %w", err)
	}
	fmt.Printf("Leaf 1 CID: %s\n", leaf1Cid.String())

	// Create the second leaf node.
	leaf2Data := map[string]interface{}{
		"data": "leaf node 2",
	}
	leaf2Cid, err := dagPut(ctx, ipfs, leaf2Data, DagPutOptions{
		Format: "dag-cbor",
		Hash:   "sha2-256",
	})
	if err != nil {
		return cid.Undef, fmt.Errorf("failed to dag put leaf 2: %w", err)
	}
	fmt.Printf("Leaf 2 CID: %s\n", leaf2Cid.String())

	// Create the internal node linking both leaf nodes.
	internalData := map[string]interface{}{
		"left":  map[string]interface{}{"/": leaf1Cid.String()},
		"right": map[string]interface{}{"/": leaf2Cid.String()},
	}
	rootCid, err := dagPut(ctx, ipfs, internalData, DagPutOptions{
		Format: "dag-cbor",
		Hash:   "sha2-256",
	})
	if err != nil {
		return cid.Undef, fmt.Errorf("failed to dag put internal node: %w", err)
	}
	fmt.Printf("Internal (root) CID: %s\n", rootCid.String())

	return rootCid, nil
}

func main() {
	// Connect to the local IPFS node via the RPC API.
	ctx := context.Background()
	ipfs, err := rpc.NewLocalApi()
	if err != nil {
		log.Fatalf("failed to create local IPFS API: %v", err)
	}

	// Create the three-node DAG.
	rootCid, err := createThreeNodeDAG(ctx, ipfs)
	if err != nil {
		log.Fatalf("failed to create three node DAG: %v", err)
	}

	// Pin the root node for persistence.
	p := path.FromCid(rootCid)
	if err := ipfs.Pin().Add(ctx, p); err != nil {
		log.Fatalf("failed to pin the root node: %v", err)
	}

	// Publish the root CID to the pubsub topic "t7a".
	message := []byte(rootCid.String())
	if err := ipfs.PubSub().Publish(ctx, "t7a", message); err != nil {
		log.Fatalf("failed to publish on pubsub: %v", err)
	}
	fmt.Println("Published root CID to pubsub topic 't7a'")
}
```
EOF_/home/stevegt/lab/grid-poc/x/ipfs-rpc/main.go