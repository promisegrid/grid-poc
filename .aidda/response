File: /home/stevegt/lab/grid-poc/x/gopherjs/hello-wasm/hello.go
```go
// +build js,wasm

package main

import (
	"syscall/js"
)

func main() {
	// Get the global document object.
	document := js.Global().Get("document")

	// Create a button element.
	button := document.Call("createElement", "button")
	button.Set("innerHTML", "Click me")

	// Append the button to the body.
	document.Get("body").Call("appendChild", button)

	// Define the click event handler.
	clickHandler := js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		p := document.Call("createElement", "p")
		p.Set("innerHTML", "Hello, big world!")
		document.Get("body").Call("appendChild", p)
		return nil
	})
	// It's important to release the function when not used.
	defer clickHandler.Release()

	// Add the click event listener to the button.
	button.Call("addEventListener", "click", clickHandler)

	// Prevent the Go program from exiting.
	select {}
}
```
EOF_/home/stevegt/lab/grid-poc/x/gopherjs/hello-wasm/hello.go

File: /home/stevegt/lab/grid-poc/x/gopherjs/hello-wasm/hello.html
```html
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>WASM Demo</title>
  <script src="wasm_exec.js"></script>
  <script>
    // Instantiate and run the WebAssembly module.
    const go = new Go();
    if (WebAssembly.instantiateStreaming) {
      WebAssembly.instantiateStreaming(fetch("hello.wasm"), go.importObject).then((result) => {
        go.run(result.instance);
      });
    } else {
      fetch("hello.wasm").then(response =>
        response.arrayBuffer()
      ).then(bytes =>
        WebAssembly.instantiate(bytes, go.importObject)
      ).then((result) => {
        go.run(result.instance);
      });
    }
  </script>
</head>
<body>
  <!-- The button and paragraphs will be created by the WebAssembly module -->
  <h1>WebAssembly Hello Demo</h1>
</body>
</html>
```
EOF_/home/stevegt/lab/grid-poc/x/gopherjs/hello-wasm/hello.html

File: /home/stevegt/lab/grid-poc/x/gopherjs/hello-wasm/Makefile
```
# Makefile for building the WebAssembly demo

# Set GOOS and GOARCH for WebAssembly
WASM_GOOS=js
WASM_GOARCH=wasm
GO=go

# Update GOROOT if necessary; otherwise, it is picked up from the environment
export GOROOT ?= $(shell go env GOROOT)

# Default target builds the wasm binary and copies the wasm_exec.js file.
all: build copy-wasm_exec

# Build hello.wasm from hello.go
build: hello.wasm

hello.wasm: hello.go
	GOOS=$(WASM_GOOS) GOARCH=$(WASM_GOARCH) $(GO) build -o hello.wasm hello.go

# Copy wasm_exec.js from the Go distribution to the current directory.
copy-wasm_exec:
	cp "$(GOROOT)/misc/wasm/wasm_exec.js" .

clean:
	rm -f hello.wasm wasm_exec.js

.PHONY: all build copy-wasm_exec clean
```
EOF_/home/stevegt/lab/grid-poc/x/gopherjs/hello-wasm/Makefile