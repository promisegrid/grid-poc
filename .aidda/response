File: /home/stevegt/lab/grid-poc/x/node-boxo/go.mod
```mod
module node-boxo

go 1.23.0

require (
	github.com/ipfs/boxo v0.29.1
	github.com/ipfs/go-cid v0.5.0
	github.com/ipfs/go-datastore v0.8.2
	github.com/libp2p/go-libp2p v0.41.1
	github.com/multiformats/go-multiaddr v0.15.0
	github.com/multiformats/go-multicodec v0.9.0
)

require (
	github.com/alecthomas/units v0.0.0-20240927000941-0f3dac36c52b // indirect
	github.com/benbjohnson/clock v1.3.5 // indirect
	github.com/beorn7/perks v1.0.1 // indirect
	github.com/cespare/xxhash/v2 v2.3.0 // indirect
	github.com/containerd/cgroups v1.1.0 // indirect
	github.com/coreos/go-systemd/v22 v22.5.0 // indirect
	github.com/crackcomm/go-gitignore v0.0.0-20241020182519-7843d2ba8fdf // indirect
	github.com/cskr/pubsub v1.0.2 // indirect
	github.com/davidlazar/go-crypto v0.0.0-20200604182044-b73af7476f6c // indirect
	github.com/decred/dcrd/dcrec/secp256k1/v4 v4.4.0 // indirect
	github.com/docker/go-units v0.5.0 // indirect
	github.com/elastic/gosigar v0.14.3 // indirect
	github.com/filecoin-project/go-clock v0.1.0 // indirect
	github.com/flynn/noise v1.1.0 // indirect
	github.com/francoispqt/gojay v1.2.13 // indirect
	github.com/gammazero/chanqueue v1.1.0 // indirect
	github.com/gammazero/deque v1.0.0 // indirect
	github.com/go-logr/logr v1.4.2 // indirect
	github.com/go-logr/stdr v1.2.2 // indirect
	github.com/go-task/slim-sprig/v3 v3.0.0 // indirect
	github.com/godbus/dbus/v5 v5.1.0 // indirect
	github.com/gogo/protobuf v1.3.2 // indirect
	github.com/google/gopacket v1.1.19 // indirect
	github.com/google/pprof v0.0.0-20250208200701-d0013a598941 // indirect
	github.com/google/uuid v1.6.0 // indirect
	github.com/gorilla/websocket v1.5.3 // indirect
	github.com/hashicorp/golang-lru/v2 v2.0.7 // indirect
	github.com/huin/goupnp v1.3.0 // indirect
	github.com/ipfs/bbloom v0.0.4 // indirect
	github.com/ipfs/go-bitfield v1.1.0 // indirect
	github.com/ipfs/go-block-format v0.2.0 // indirect
	github.com/ipfs/go-ipfs-delay v0.0.1 // indirect
	github.com/ipfs/go-ipfs-pq v0.0.3 // indirect
	github.com/ipfs/go-ipfs-util v0.0.3 // indirect
	github.com/ipfs/go-ipld-format v0.6.0 // indirect
	github.com/ipfs/go-ipld-legacy v0.2.1 // indirect
	github.com/ipfs/go-log/v2 v2.5.1 // indirect
	github.com/ipfs/go-metrics-interface v0.3.0 // indirect
	github.com/ipfs/go-peertaskqueue v0.8.2 // indirect
	github.com/ipld/go-codec-dagpb v1.6.0 // indirect
	github.com/ipld/go-ipld-prime v0.21.0 // indirect
	github.com/jackpal/go-nat-pmp v1.0.2 // indirect
	github.com/jbenet/go-temp-err-catcher v0.1.0 // indirect
	github.com/klauspost/compress v1.18.0 // indirect
	github.com/klauspost/cpuid/v2 v2.2.10 // indirect
	github.com/koron/go-ssdp v0.0.5 // indirect
	github.com/libp2p/go-buffer-pool v0.1.0 // indirect
	github.com/libp2p/go-flow-metrics v0.2.0 // indirect
	github.com/libp2p/go-libp2p-asn-util v0.4.1 // indirect
	github.com/libp2p/go-msgio v0.3.0 // indirect
	github.com/libp2p/go-netroute v0.2.2 // indirect
	github.com/libp2p/go-reuseport v0.4.0 // indirect
	github.com/libp2p/go-yamux/v5 v5.0.0 // indirect
	github.com/marten-seemann/tcp v0.0.0-20210406111302-dfbc87cc63fd // indirect
	github.com/mattn/go-isatty v0.0.20 // indirect
	github.com/miekg/dns v1.1.63 // indirect
	github.com/mikioh/tcpinfo v0.0.0-20190314235526-30a79bb1804b // indirect
	github.com/mikioh/tcpopt v0.0.0-20190314235656-172688c1accc // indirect
	github.com/minio/sha256-simd v1.0.1 // indirect
	github.com/mr-tron/base58 v1.2.0 // indirect
	github.com/multiformats/go-base32 v0.1.0 // indirect
	github.com/multiformats/go-base36 v0.2.0 // indirect
	github.com/multiformats/go-multiaddr-dns v0.4.1 // indirect
	github.com/multiformats/go-multiaddr-fmt v0.1.0 // indirect
	github.com/multiformats/go-multibase v0.2.0 // indirect
	github.com/multiformats/go-multihash v0.2.3 // indirect
	github.com/multiformats/go-multistream v0.6.0 // indirect
	github.com/multiformats/go-varint v0.0.7 // indirect
	github.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect
	github.com/onsi/ginkgo/v2 v2.22.2 // indirect
	github.com/opencontainers/runtime-spec v1.2.0 // indirect
	github.com/pbnjay/memory v0.0.0-20210728143218-7b4eea64cf58 // indirect
	github.com/pion/datachannel v1.5.10 // indirect
	github.com/pion/dtls/v2 v2.2.12 // indirect
	github.com/pion/dtls/v3 v3.0.4 // indirect
	github.com/pion/ice/v4 v4.0.8 // indirect
	github.com/pion/interceptor v0.1.37 // indirect
	github.com/pion/logging v0.2.3 // indirect
	github.com/pion/mdns/v2 v2.0.7 // indirect
	github.com/pion/randutil v0.1.0 // indirect
	github.com/pion/rtcp v1.2.15 // indirect
	github.com/pion/rtp v1.8.11 // indirect
	github.com/pion/sctp v1.8.37 // indirect
	github.com/pion/sdp/v3 v3.0.10 // indirect
	github.com/pion/srtp/v3 v3.0.4 // indirect
	github.com/pion/stun v0.6.1 // indirect
	github.com/pion/stun/v3 v3.0.0 // indirect
	github.com/pion/transport/v2 v2.2.10 // indirect
	github.com/pion/transport/v3 v3.0.7 // indirect
	github.com/pion/turn/v4 v4.0.0 // indirect
	github.com/pion/webrtc/v4 v4.0.10 // indirect
	github.com/pkg/errors v0.9.1 // indirect
	github.com/polydawn/refmt v0.89.0 // indirect
	github.com/prometheus/client_golang v1.21.1 // indirect
	github.com/prometheus/client_model v0.6.1 // indirect
	github.com/prometheus/common v0.62.0 // indirect
	github.com/prometheus/procfs v0.15.1 // indirect
	github.com/quic-go/qpack v0.5.1 // indirect
	github.com/quic-go/quic-go v0.50.1 // indirect
	github.com/quic-go/webtransport-go v0.8.1-0.20241018022711-4ac2c9250e66 // indirect
	github.com/raulk/go-watchdog v1.3.0 // indirect
	github.com/spaolacci/murmur3 v1.1.0 // indirect
	github.com/whyrusleeping/chunker v0.0.0-20181014151217-fe64bd25879f // indirect
	github.com/wlynxg/anet v0.0.5 // indirect
	go.opentelemetry.io/auto/sdk v1.1.0 // indirect
	go.opentelemetry.io/otel v1.34.0 // indirect
	go.opentelemetry.io/otel/metric v1.34.0 // indirect
	go.opentelemetry.io/otel/trace v1.34.0 // indirect
	go.uber.org/dig v1.18.0 // indirect
	go.uber.org/fx v1.23.0 // indirect
	go.uber.org/mock v0.5.0 // indirect
	go.uber.org/multierr v1.11.0 // indirect
	go.uber.org/zap v1.27.0 // indirect
	golang.org/x/crypto v0.35.0 // indirect
	golang.org/x/exp v0.0.0-20250218142911-aa4b98e5adaa // indirect
	golang.org/x/mod v0.23.0 // indirect
	golang.org/x/net v0.35.0 // indirect
	golang.org/x/sync v0.11.0 // indirect
	golang.org/x/sys v0.30.0 // indirect
	golang.org/x/text v0.22.0 // indirect
	golang.org/x/tools v0.30.0 // indirect
	google.golang.org/protobuf v1.36.5 // indirect
	lukechampine.com/blake3 v1.4.0 // indirect
)
```
EOF_/home/stevegt/lab/grid-poc/x/node-boxo/go.mod

File: /home/stevegt/lab/grid-poc/x/node-boxo/node-boxo.go
```go
package main

import (
	"context"
	"fmt"
	"os"
	"path/filepath"
	"time"

	"github.com/ipfs/boxo/bitswap/network/bsnet"
	bsserver "github.com/ipfs/boxo/bitswap/server"
	"github.com/ipfs/boxo/blockstore"
	"github.com/ipfs/boxo/ipns"
	"github.com/ipfs/boxo/provider"
	config "github.com/ipfs/go-ipfs-config"
	ds "github.com/ipfs/go-datastore"
	flatfs "github.com/ipfs/go-ds-flatfs"
	repo "github.com/ipfs/kubo/repo"
	"github.com/libp2p/go-libp2p"
	"github.com/libp2p/go-libp2p/core/host"
	dual "github.com/libp2p/go-libp2p-kad-dht/dual"
	pubsub "github.com/libp2p/go-libp2p-pubsub"
	// other imports omitted intentionally
	"path"
)

const repoPath = "~/.ipfs-boxo"

type BoxoNode struct {
	Host          host.Host
	DHT           *dual.DHT
	PubSub        *pubsub.PubSub
	Blockstore    blockstore.Blockstore
	Bitswap       interface{}
	IPNSPublisher *ipns.Publisher
}

func expandPath(p string) (string, error) {
	if len(p) > 0 && p[0] == '~' {
		home, err := os.UserHomeDir()
		if err != nil {
			return "", err
		}
		return filepath.Join(home, p[1:]), nil
	}
	return p, nil
}

func setupRepo(ctx context.Context, p string) (repo.Repo, error) {
	expandedPath, err := expandPath(p)
	if err != nil {
		return nil, fmt.Errorf("expanding repo path: %w", err)
	}
	if err := os.MkdirAll(expandedPath, 0755); err != nil {
		return nil, fmt.Errorf("creating repo directory: %w", err)
	}

	// Initialize configuration
	cfg, err := config.Init(os.Stdout, 2048)
	if err != nil {
		return nil, fmt.Errorf("initializing config: %w", err)
	}

	// Configure flatfs datastore
	cfg.Datastore.Spec = map[string]interface{}{
		"type":      "flatfs",
		"path":      "blocks",
		"sync":      true,
		"shardFunc": "/repo/flatfs/shard/v1/next-to-last/2",
	}

	// Open or create the flatfs datastore
	d, err := flatfs.CreateOrOpen(
		flatfs.ParseShardFunc(cfg.Datastore.Spec["shardFunc"].(string)),
		filepath.Join(expandedPath, "blocks"),
		false,
	)
	if err != nil {
		return nil, fmt.Errorf("opening datastore: %w", err)
	}

	return &repo.Mock{
		D: d,
		C: *cfg,
	}, nil
}

func NewBoxoNode(ctx context.Context) (*BoxoNode, error) {
	// Initialize repository with disk storage
	r, err := setupRepo(ctx, repoPath)
	if err != nil {
		return nil, fmt.Errorf("repo setup failed: %w", err)
	}
	// Since we are using repo.Mock, extract the datastore
	ds := r.(*repo.Mock).D

	// Create libp2p host with recommended options
	hst, err := libp2p.New(
		libp2p.ListenAddrStrings(
			"/ip4/0.0.0.0/tcp/4001",
			"/ip6/::/tcp/4001",
		),
		libp2p.NATPortMap(),
	)
	if err != nil {
		return nil, fmt.Errorf("creating host: %w", err)
	}

	// Initialize DHT in server mode
	dht, err := dual.New(ctx, hst, dual.DHTOption(
		dual.DHTMode(dual.ModeAuto),
	))
	if err != nil {
		return nil, fmt.Errorf("creating DHT: %w", err)
	}

	// Initialize Gossipsub router
	ps, err := pubsub.NewGossipSub(ctx, hst)
	if err != nil {
		return nil, fmt.Errorf("creating pubsub: %w", err)
	}

	// Initialize blockstore and Bitswap server
	bs := blockstore.NewBlockstore(ds)
	net := bsnet.NewFromIpfsHost(hst)
	bswap := bsserver.New(ctx, net, bs)
	net.Start(bswap)

	// Set up IPNS publisher using the DHT as the routing interface.
	ipnsPublisher := ipns.NewPublisher(dht, ds, hst.ID())

	return &BoxoNode{
		Host:          hst,
		DHT:           dht,
		PubSub:        ps,
		Blockstore:    bs,
		Bitswap:       bswap,
		IPNSPublisher: ipnsPublisher,
	}, nil
}

func (n *BoxoNode) Start(ctx context.Context) error {
	// Bootstrap DHT
	if err := n.DHT.Bootstrap(ctx); err != nil {
		return fmt.Errorf("dht bootstrap failed: %w", err)
	}

	// Connect to IPFS bootstrap peers using repo configuration.
	cfg := n.getRepoConfig()
	peers, err := cfg.BootstrapPeers()
	if err != nil {
		return fmt.Errorf("getting bootstrap peers: %w", err)
	}

	for _, p := range peers {
		if err := n.Host.Connect(ctx, p); err != nil {
			fmt.Printf("Failed to connect to bootstrap peer %s: %v\n", p.ID(), err)
		}
	}

	// Start content provider
	provider.NewProvider(n.Host, n.DHT, n.Blockstore)
	return nil
}

// getRepoConfig attempts to retrieve the repository configuration.
func (n *BoxoNode) getRepoConfig() *config.Config {
	// For this example, we assume the config is stored in the provider's repo.
	// In a complete implementation, you would store and retrieve the repo config.
	// Here we simply initialize a new config.
	cfg, _ := config.Init(os.Stdout, 2048)
	return cfg
}

func (n *BoxoNode) StartIPNSPublication(ctx context.Context) {
	// Example IPNS publication
	go func() {
		time.Sleep(5 * time.Second) // Wait for node initialization
		value := []byte("/ipfs/QmExampleContentHash")
		// Publish with 24h validity
		expiration := time.Now().Add(24 * time.Hour)
		err := n.IPNSPublisher.Publish(ctx, n.Host.Peerstore().PrivKey(n.Host.ID()),
			value, ipns.WithEOL(expiration), ipns.WithIPNSPath(value))
		if err != nil {
			fmt.Printf("IPNS publication failed: %v\n", err)
		} else {
			fmt.Println("Successfully published IPNS record")
		}
	}()
}

func main() {
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	node, err := NewBoxoNode(ctx)
	if err != nil {
		panic(fmt.Errorf("node creation failed: %w", err))
	}

	if err := node.Start(ctx); err != nil {
		panic(fmt.Errorf("node start failed: %w", err))
	}
	defer node.Host.Close()

	fmt.Printf("IPFS node running with ID %s\n", node.Host.ID())
	fmt.Printf("Listening on addresses:\n")
	for _, addr := range node.Host.Addrs() {
		fmt.Printf("  %s/p2p/%s\n", addr, node.Host.ID())
	}

	// Start IPNS publication example
	node.StartIPNSPublication(ctx)

	// Keep the node running
	select {}
}
```
EOF_/home/stevegt/lab/grid-poc/x/node-boxo/node-boxo.go