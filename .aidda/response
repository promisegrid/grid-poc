<think>
Okay, I need to create a set of test-case questions to evaluate the wire.md document for compliance with the PromiseGrid wire protocol requirements. Let me start by understanding the requirements mentioned in the provided resources. 

First, looking at the wire.md document, it specifies the use of CBOR, COSE, and IPLD/DAG-CBOR. Key points include:

1. **CID Representation**: CIDs must be full strings (not truncated) when used as map keys in DAG-CBOR because binary CIDs (CBOR tag 42) can't be map keys. The wire-chat.md mentions that even though native binary CIDs are allowed elsewhere, map keys require string representation, like base32 encoded CIDs.

2. **Decision Tree Structure**: The decision tree is represented as nested lists with each node containing an event CID, probability, weight multiplier, and nested branches. The wire.md shows an example in CBOR, but there's a note pointing out an error in using CIDs as strings instead of binary in some parts.

3. **COSE Signing**: The protocol uses COSE_Sign1 with protected headers (including algorithm and CWT claims), payload, and signature. The Sig_structure includes protected headers, external_aad, and payload.

4. **Trust Metric Calculation**: The trust is computed by multiplying weight and the difference between actual and predicted outcomes. However, the example code in wire.md has a flaw where negative trust could result from low actual values, which might not be intended.

Now, cross-referencing with the PromiseGrid GitHub README (search result [2]), the architecture emphasizes content-addressable code and capability-based security. The wire protocol must align with these principles, ensuring messages are properly signed and CIDs are correctly formatted.

Test cases should check each requirement. Let's break down possible areas:

- **CID Format Compliance**: Are CIDs used as map keys in DAG-CBOR properly formatted as full strings (not binary)? This is from wire.md section 2.2 and wire-chat.md's discussion on identity multibase.

- **Decision Tree Structure**: Does the message structure correctly use nested lists without maps to avoid IPLD key restrictions? The example in wire.md uses lists, but there's an XXX comment noting an error.

- **COSE Integration**: Are the protected headers, payload, and external_aad correctly included in the Sig_structure for signing? The wire-chat.md explains COSE components.

- **Trust Calculation**: Does the trust formula correctly handle probabilities and weights without allowing negative trust unintentionally? The sample code in wire.md has a noted flaw.

- **Message Envelope**: Does the outer message structure include the protocol tag and version CID as per wire.md section 3.1?

Each test question should target a specific requirement. For example:

1. Are all CIDs used as map keys in DAG-CBOR structures represented as full CID strings (e.g., base32 encoded) rather than binary forms? [Yes/No]

2. Does the decision tree structure use nested lists instead of maps to represent state transitions, ensuring compliance with DAG-CBOR requirements? [Yes/No]

3. Is the COSE_Sign1 structure constructed such that the signature is computed over the protected headers, external_aad (if present), and payload as specified in the Sig_structure? [Yes/No]

4. Does the trust metric calculation avoid multiplying by (actual - predicted) when this could result in negative trust values, as indicated in the wire.md's XXX comment? [Yes/No]

5. Is the outer message envelope correctly tagged with the protocol-specific CBOR tag and includes the protocol version CID? [Yes/No]

I need to ensure each question is answerable with yes/no based on the document's compliance. Also, reference the relevant sections of wire.md, wire-chat.md, and other PromiseGrid resources provided. For example, the CID format question references wire.md section 2.2 and the wire-chat.md's discussion on identity multibase.

Another consideration is the correct use of CBOR tags and data types. For instance, the protocol tag (0x67726964) should be present in the outer envelope. The example in wire.md section 3.2 uses lists correctly but has an error in CID representation, which should be addressed in the test case.

Also, the trust calculation in wire.md's section 4.3 has a flawed formula. The test should check if the document corrects this, perhaps by using absolute values or another method to prevent negative trust.

I should also check if probabilities are represented as fixed-point integers as discussed in the wire-chat.md's open questions, though the current document uses floats. This could be another test case.

Regarding message formats, the wire-chat.md mentions alternative structures like the Signature-Last variant. The test should verify if the document adheres to the specified structure or allows flexibility.

Finally, ensuring that all CIDs in the decision tree are full strings and not truncated, as per DAG-CBOR requirements, is crucial. Any deviation would be a compliance issue.

In summary, the test cases should cover CID formatting, data structure compliance (lists vs. maps), COSE signing components, trust calculation correctness, protocol tagging, and handling of probabilities and weights. Each question must map to a specific requirement from the documents and resources.
</think>

File: /home/stevegt/lab/grid-poc/x/wire/wire-test.md
```
# PromiseGrid Wire Protocol Compliance Test Cases

### CID Format Compliance
1. Are all CIDs used as map keys in DAG-CBOR structures represented as full base32-encoded strings rather than binary forms with CBOR tag 42? [wire.md §2.2][wire-chat.md §Identity Multibase]
2. Does the document prohibit use of truncated CID representations in map keys while allowing native binary CIDs (CBOR tag 42) in non-key positions? [wire.md §2.2][wire-chat.md §Identity Multibase]

### Data Structure Validation
3. Does the decision tree structure exclusively use nested lists instead of maps for state transitions to comply with DAG-CBOR requirements? [wire.md §3.2][wire-chat.md §Decision Tree]
4. Are all event and state identifiers in decision trees represented as complete CID strings rather than binary forms? [wire.md §3.2][wire-chat.md §Alternative Formats]
5. Does the protocol avoid using floating-point NaN/Infinity values in probability fields per DAG-CBOR constraints? [wire.md §2.1]

### Cryptographic Integrity
6. Is the COSE_Sign1 signature computed over the concatenated Sig_structure containing protected headers, external_aad (if present), and payload? [wire.md §3.3][wire-chat.md §COSE Message Fields]
7. Does the protected header include both algorithm identifiers (-7 for ES256) and CWT claims in its CBOR structure? [wire.md §3.3][wire-chat.md §COSE-Sign1]

### Trust Metric Implementation
8. Does the trust calculation formula prevent multiplication by negative values through use of absolute differences or signed weighting? [wire.md §4.3][wire-chat.md §Trust Metric]
9. Is weight multiplier application limited to subsequent branches rather than parent nodes in the decision tree? [wire.md §3.2][wire-chat.md §Decision Tree]

### Message Envelope Structure
10. Does the outer message envelope contain both protocol tag (0x67726964) and protocol version CID? [wire.md §3.1]
11. Are all message-layer CIDs represented as full binary forms using identity multibase when not acting as map keys? [wire.md §2.2][wire-chat.md §CID Representation]

### Probability Handling
12. Does the document specify fixed-point integer encoding for probabilities to ensure deterministic hashing? [wire-chat.md §Open Questions]
13. Are all probability values constrained to 0.0-1.0 inclusive with validation mechanisms? [wire.md §3.2][wire-chat.md §Decision Tree]

### Routing Efficiency
14. Can routing nodes extract protocol tag and version CID without fully parsing nested decision trees? [wire.md §3.1][wire-chat.md §Alternative Formats]
15. Does the message structure enable partial parsing of decision tree headers before signature verification? [wire-chat.md §Signature-Last Variant]

### Pinning Agreements
16. Do pinning contract references in payloads use full CID strings rather than binary forms? [wire.md §3.3]
17. Are pinned peer identifiers represented as complete base32-encoded CID strings? [wire.md §3.3]

### Versioning & Compatibility
18. Does the protocol document specify CIDv1 as mandatory minimum version? [wire.md §4.5]
19. Is there a defined strategy for backward compatibility with future CID versions? [wire.md §4.5]

### Constrained Devices
20. Does the specification recommend maximum recursion depth limits for decision trees? [wire.md §4.4][wire-chat.md §Open Questions]
21. Are there size constraints on external_aad fields to prevent memory exhaustion? [wire.md §2.3]

### Negative Trust Handling
22. Does the document define policy for agents with negative net trust values? [wire-chat.md §Open Questions]
23. Are there safeguards against trust metric underflow/overflow in continuous operation? [wire.md §4.3]

### Signature Positioning
24. Is the signature placement optimized for routing efficiency while maintaining cryptographic integrity? [wire-chat.md §Alternative Formats]
25. Does the envelope structure allow late-binding signature verification without payload parsing? [wire-chat.md §Signature-Last]
``` 
EOF_/home/stevegt/lab/grid-poc/x/wire/wire-test.md

<references>
[1] https://github.com/guyonroche/promish
[2] https://github.com/promisegrid/promisegrid
[3] https://www.packtpub.com/en-us/learning/how-to-tutorials/tag/server-side-web-development?page=5
[4] https://github.com/tabalinas/jsgrid/issues/35
[5] https://www.marsh.com/content/dam/marsh/Documents/PDF/US-en/Green%20Energy%20Newsletter%20Sept%202013-09-2013.pdf
[6] https://www.ofcom.org.uk/siteassets/resources/documents/consultations/uncategorised/8068-870-915/responses/scf.pdf?v=204567
[7] https://github.com/stevegt/grokker
[8] https://infocenter.sybase.com/help/topic/com.sybase.dc00573_0700/pdf/admin70.pdf
[9] https://nascompares.com/2024/04/05/ugreen-nasync-dxp480t-nas-review/
[10] https://kb.promise.com/thread/how-do-i-access-the-command-line-interface-cli-in-windows/
[11] https://www.govinfo.gov/content/pkg/CREC-2023-09-14/pdf/CREC-2023-09-14.pdf
</references>
