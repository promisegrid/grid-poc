update cbor-codec based on cbor-decode lessons learned

Examine the cbor-decode package and its tests -- we are specifically
interested in DecodeTag, DecodeRaw, and the TestDecodeVarious example.

Update the cbor-codec package to use the same techniques as in
DecodeTag, DecodeRaw, and the TestDecodeVarious example:

- remove the map and factory code
- use DecodeTag to get the tag number
- use a DecodeRaw to decode the tag content

Do not import the cbor-decode package into the cbor-codec package. Do
not use reflect.  

The main difference between the two packages is that cbor-codec
uses an object-oriented approach to implement a Codec struct.  There
should be DecodeTag and DecodeRaw methods on the Codec struct that
work the same way as in cbor-decode.  

The main purpose of the cbor-codec package is to provide a struct that
can retain the encoding and decoding options between calls to the
decode and encode methods.  

Ensure test cases are updated to reflect the new implementation, and
that the tests are passing.

Sysmsg: You are an expert Go programmer. Please make the requested changes to the given code or documentation.
In: 
 x/cbor-codec/codec.go
 x/cbor-codec/codec_test.go
 x/cbor-decode/decode.go
 x/cbor-decode/decode_test.go
Out:
 x/cbor-codec/codec.go
 x/cbor-codec/codec_test.go

.stop

Out:
  x/cbor-decode/decode.go
  x/cbor-decode/decode_test.go

.stop



Sysmsg: You are an expert Go programmer. Please make the requested changes to the given code or documentation.
In: 
 x/interfaces-git/interfaces-git.go
 x/interfaces-git/interfaces-git_test.go
 x/cbor-codec/codec/codec.go
 x/cbor-codec/codec/codec_test.go
.stop

Out:
 x/interfaces-git/interfaces-git_test.go

.stop

 x/cbor-codec/codec/codec.go
 x/cbor-codec/codec/codec_test.go


.stop

 x/interfaces-git/interfaces-git.go
 x/interfaces-git/interfaces-git_test.go

.stop

recommend a better design than the Get* methods but that still
satisfies the requirements for CBOR encoding and decoding; we don't
want method names and field names to be the same

ensure Store is thread-safe


recommend a data structure 

problem:

- for the application described in README.md
- that can store a large number of large byte sequences 
- that can find a small subsequence of bytes among all large byte
  sequences
- small sequence size ranges from a few bytes to hundreds of megabytes
- large sequence size ranges from a few bytes to hundreds of gigabytes 
- number of large sequences ranges from a few to billions
- must be able to handle variable-length byte sequences
- must be able to handle sequences containing any byte value
- must be able to handle sequences containing any arbitrary sequence of
  bytes
- must be able to handle frequent appends to large sequences
- must be able to handle slight modifications to large sequences while
  preserving the original large sequence (e.g. maybe the set of all
  versions of a large sequence is a graph structure)
  
changes:

- expand merkle DAG description and usage
- refine conclusions
- make no other changes

Sysmsg: You are an expert Go programmer. Please make the requested changes to the given code or documentation.
In: 
 README.md
 x/data-structure/description.md
Out: 
 x/data-structure/description.md

.stop

- backrefs are in messages via hash chain
- forward refs are on disk
